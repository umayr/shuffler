{"version":3,"sources":["service.js","Modals.js","useMode.js","useShuffle.js","App.js","index.js"],"names":["DEFAULT_SEED","shuffle","list","a","seed","Array","isArray","Error","func","extract","name","count","Number","isInteger","pick","group","generate","uniqueNamesGenerator","separator","dictionaries","adjectives","colors","animals","Modal","onClose","children","Layer","onClickOutside","onEsc","Box","pad","horizontal","vertical","gap","width","min","Button","label","icon","Close","secondary","onClick","ACTION_TYPE_PICK","ACTION_TYPE_GROUP","ACTION_TITLE","ACTION_FUNC","Action","type","source","useState","value","setValue","setList","useEffect","length","parseInt","effect","data","useMemo","map","v","join","Heading","level","margin","RangeInput","max","onChange","event","target","List","Pick","props","Group","Help","Table","TableHeader","TableRow","TableCell","scope","border","TableBody","key","text","style","MODE_LIGHT","MODE_DARK","DEFAULT_MODE","useMode","mode","setMode","useShuffle","setSource","setSeed","push","includes","prev","Set","split","toString","trim","prepare","filter","clear","current","update","next","isEmpty","KEY_MAPPING","App","showPick","setShowPick","showGroup","setShowGroup","showHelp","setShowHelp","toggleMode","handleAdd","Grommet","theme","grommet","themeMode","minHeight","Keyboard","onKeyDown","ctrlKey","toLowerCase","Main","direction","onEnter","TextInput","placeholder","primary","Add","disabled","height","DropButton","Down","dropAlign","top","right","dropContent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc314bea.chunk.js","sourcesContent":["import {\n    uniqueNamesGenerator,\n    adjectives,\n    colors,\n    animals,\n} from 'unique-names-generator'\n\nconst DEFAULT_SEED = `\n   \"Have you ever had shoes without shoe strings?\"\n   –– Kanye West\n`\n\nexport const shuffle = async (list, seed = DEFAULT_SEED) => {\n    if (!Array.isArray(list)) {\n        throw new Error(`invalid value for argument list: ${list}`)\n    }\n\n    if (seed === null || typeof seed === 'undefined') {\n        throw new Error(`invalid value for argument seed: ${seed}`)\n    }\n\n    const { shuffle: func } = await import('@wasm')\n\n    return func(list, seed)\n}\n\nconst extract =\n    name =>\n    async (list, count = 0, seed = DEFAULT_SEED) => {\n        if (!Array.isArray(list)) {\n            throw new Error(`invalid value for argument list: ${list}`)\n        }\n\n        if (\n            !Number.isInteger(count) ||\n            (Number.isInteger(count) && count <= 0)\n        ) {\n            throw new Error(`invalid value for argument count: ${count}`)\n        }\n\n        if (seed === null || typeof seed === 'undefined') {\n            throw new Error(`invalid value for argument seed: ${seed}`)\n        }\n\n        const { [name]: func } = await import('@wasm')\n\n        return func(list, count, seed)\n    }\n\nexport const pick = async (...args) => extract('pick')(...args)\n\nexport const group = async (...args) => extract('group')(...args)\n\nexport const generate = () =>\n    uniqueNamesGenerator({\n        separator: ' ',\n        dictionaries: [adjectives, colors, animals],\n    })\n","import { useEffect, useMemo, useState } from 'react'\nimport {\n    Heading,\n    List,\n    Layer,\n    Box,\n    Button,\n    RangeInput,\n    Table,\n    TableBody,\n    TableCell,\n    TableHeader,\n    TableRow,\n} from 'grommet'\nimport { Close as CloseIcon } from 'grommet-icons'\n\nimport { group, pick } from './service'\n\nconst Modal = ({ onClose, children }) => (\n    <Layer onClickOutside={onClose} onEsc={onClose}>\n        <Box\n            pad={{\n                horizontal: 'xlarge',\n                vertical: 'large',\n            }}\n            gap=\"large\"\n            width={{ min: '50vw' }}\n        >\n            {children}\n            <Button\n                label=\"Close\"\n                icon={<CloseIcon />}\n                secondary\n                onClick={onClose}\n            />\n        </Box>\n    </Layer>\n)\n\nconst ACTION_TYPE_PICK = 'pick'\nconst ACTION_TYPE_GROUP = 'group'\n\nconst ACTION_TITLE = {\n    [ACTION_TYPE_PICK]: 'Pick',\n    [ACTION_TYPE_GROUP]: 'Group',\n}\n\nconst ACTION_FUNC = {\n    [ACTION_TYPE_PICK]: pick,\n    [ACTION_TYPE_GROUP]: group,\n}\n\nconst Action = ({ type, source, seed = '', onClose = () => {} }) => {\n    if (type !== ACTION_TYPE_GROUP && type !== ACTION_TYPE_PICK) {\n        throw new Error(`unsupported action type: ${type}`)\n    }\n\n    const [value, setValue] = useState(1)\n    const [list, setList] = useState([])\n\n    useEffect(() => {\n        async function effect() {\n            if (Array.isArray(source) && source.length === 0) {\n                return\n            }\n\n            setList(\n                await ACTION_FUNC[type](\n                    source,\n                    Number.parseInt(value, 10),\n                    seed,\n                ),\n            )\n        }\n\n        effect()\n    }, [source, value, type, seed])\n\n    const data = useMemo(\n        () => (type === ACTION_TYPE_GROUP ? list.map(v => v.join(',')) : list),\n        [type, list],\n    )\n\n    return (\n        <Modal onClose={onClose}>\n            <Heading level={3} margin=\"xsmall\">\n                {ACTION_TITLE[type]} ({value})\n            </Heading>\n            <RangeInput\n                value={value}\n                max={source.length}\n                min={1}\n                onChange={event => setValue(event.target.value)}\n            />\n            {list.length > 0 && <List data={data} pad=\"small\" />}\n        </Modal>\n    )\n}\n\nexport const Pick = props => <Action type={ACTION_TYPE_PICK} {...props} />\n\nexport const Group = props => <Action type={ACTION_TYPE_GROUP} {...props} />\n\nexport const Help = ({ source, onClose = () => {} }) => (\n    <Modal onClose={onClose}>\n        <Heading level={3} margin=\"xsmall\">\n            Shortcuts\n        </Heading>\n        <Table>\n            <TableHeader>\n                <TableRow>\n                    <TableCell scope=\"col\" border=\"bottom\">\n                        Key\n                    </TableCell>\n                    <TableCell scope=\"col\" border=\"bottom\">\n                        Action\n                    </TableCell>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                {source.map(({ key, text }) => (\n                    <TableRow key={key}>\n                        <TableCell scope=\"row\">\n                            <pre style={{ margin: 0 }}>{key}</pre>\n                        </TableCell>\n                        <TableCell>{text}</TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    </Modal>\n)\n","import { useState } from 'react'\n\nconst MODE_LIGHT = 'light'\nconst MODE_DARK = 'dark'\n\nconst DEFAULT_MODE = MODE_LIGHT\n\nconst useMode = () => {\n    const [mode, setMode] = useState(DEFAULT_MODE)\n\n    const toggle = () => {\n        switch (mode) {\n            case MODE_DARK:\n                setMode(MODE_LIGHT)\n                return\n            case MODE_LIGHT:\n                setMode(MODE_DARK)\n                return\n            default:\n                setMode(DEFAULT_MODE)\n        }\n    }\n\n    return [mode, toggle]\n}\n\nexport default useMode\n","import { useEffect, useState } from 'react'\n\nimport { generate, shuffle } from './service'\n\nconst prepare = value => {\n    if (!value.includes(',')) {\n        return [value.toString().trim()]\n    }\n\n    return [...new Set(value.split(',').map(v => v.toString().trim()))]\n}\n\nconst useShuffle = () => {\n    const [list, setList] = useState([])\n    const [source, setSource] = useState([])\n    const [seed, setSeed] = useState(generate())\n\n    useEffect(() => {\n        async function effect() {\n            setList(source)\n        }\n\n        effect()\n    }, [source])\n\n    useEffect(() => {\n        async function effect() {\n            if (source.length === 0) {\n                return\n            }\n\n            setList(await shuffle(source, seed))\n        }\n\n        effect()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [seed])\n\n    return {\n        push(value) {\n            if (source.includes(value)) {\n                return\n            }\n\n            setSource(prev => [\n                ...prev,\n                ...prepare(value).filter(v => v !== '' && !source.includes(v)),\n            ])\n        },\n        shuffle() {\n            setSeed(generate())\n        },\n        clear() {\n            setSource([])\n        },\n        list,\n        seed: {\n            current: seed,\n            update(next = generate()) {\n                setSeed(next)\n            },\n        },\n\n        isEmpty: source.length === 0,\n    }\n}\n\nexport default useShuffle\n","import { useState } from 'react'\nimport {\n    Grommet,\n    Main,\n    TextInput,\n    Box,\n    Button,\n    List,\n    DropButton,\n    Keyboard,\n} from 'grommet'\nimport { grommet } from 'grommet/themes'\nimport {\n    Add as AddIcon,\n    Group as GroupIcon,\n    ClearOption as ClearIcon,\n    Sign as PickIcon,\n    Down as DownIcon,\n    Cycle as ShuffleIcon,\n    TreeOption as SeedIcon,\n    Keyboard as ShortcutIcon,\n} from 'grommet-icons'\n\nimport { Group, Pick, Help } from './Modals'\n\nimport useMode from './useMode'\nimport useShuffle from './useShuffle'\n\nconst KEY_MAPPING = [\n    {\n        key: 'ctrl + h or ?',\n        text: 'Shows the help screen',\n    },\n    {\n        key: 'ctrl + g',\n        text: 'Opens the screen to group items together',\n    },\n    {\n        key: 'ctrl + p',\n        text: 'Opens the screen to pick items',\n    },\n    {\n        key: 'ctrl + s',\n        text: 'Shuffles items',\n    },\n    {\n        key: 'ctrl + c',\n        text: 'Clears all previous data',\n    },\n    {\n        key: 'ctrl + d',\n        text: 'Toggles between light and dark mode',\n    },\n]\n\nfunction App() {\n    const [value, setValue] = useState('')\n\n    const [showPick, setShowPick] = useState(false)\n    const [showGroup, setShowGroup] = useState(false)\n    const [showHelp, setShowHelp] = useState(false)\n\n    const [mode, toggleMode] = useMode()\n    const { list, push, shuffle, clear, seed, isEmpty } = useShuffle()\n\n    const handleAdd = () => {\n        push(value)\n        setValue('')\n    }\n\n    const handleKey = event => {\n        if (!event.ctrlKey && event.key !== '?') {\n            return\n        }\n\n        const key = event.key.toLowerCase()\n\n        if (!['?', 'h', 'd'].includes(key) && isEmpty) {\n            // prevent shuffle actions in case of the source being empty\n            return\n        }\n\n        switch (key) {\n            case 'h':\n            case '?':\n                setShowHelp(true)\n                return\n\n            case 'd':\n                toggleMode()\n                return\n\n            case 'p':\n                setShowPick(true)\n                return\n\n            case 'g':\n                setShowGroup(true)\n                return\n\n            case 'c':\n                clear()\n                return\n\n            case 's':\n                shuffle()\n                return\n\n            default:\n                return\n        }\n    }\n\n    return (\n        <Grommet\n            theme={grommet}\n            themeMode={mode}\n            style={{ minHeight: '100vh' }}\n        >\n            {showPick && (\n                <Pick source={list} onClose={() => setShowPick(false)} />\n            )}\n\n            {showGroup && (\n                <Group source={list} onClose={() => setShowGroup(false)} />\n            )}\n\n            {showHelp && (\n                <Help source={KEY_MAPPING} onClose={() => setShowHelp(false)} />\n            )}\n\n            <Keyboard onKeyDown={handleKey} target=\"document\">\n                <Main pad=\"large\">\n                    <Box direction=\"column\" gap=\"medium\">\n                        <Keyboard onEnter={handleAdd}>\n                            <Box direction=\"row\" gap=\"medium\">\n                                <TextInput\n                                    placeholder=\"Anything goes here\"\n                                    value={value}\n                                    onChange={event =>\n                                        setValue(event.target.value)\n                                    }\n                                />\n\n                                <Button\n                                    primary\n                                    icon={<AddIcon />}\n                                    label=\"Add\"\n                                    disabled={value.length === 0}\n                                    onClick={handleAdd}\n                                />\n                            </Box>\n                        </Keyboard>\n                        <List data={list} pad=\"small\" />\n                        <Box\n                            direction=\"row-reverse\"\n                            gap=\"medium\"\n                            height=\"xxsmall\"\n                        >\n                            <DropButton\n                                label=\"More\"\n                                icon={<DownIcon />}\n                                dropAlign={{ top: 'bottom', right: 'right' }}\n                                dropContent={\n                                    <Box pad=\"medium\" gap=\"medium\">\n                                        <Button\n                                            primary\n                                            icon={<ClearIcon />}\n                                            label=\"Clear\"\n                                            disabled={isEmpty}\n                                            onClick={clear}\n                                        />\n                                        <Button\n                                            primary\n                                            icon={<PickIcon />}\n                                            label=\"Pick\"\n                                            disabled={isEmpty}\n                                            onClick={() => setShowPick(true)}\n                                        />\n                                        <Button\n                                            primary\n                                            icon={<GroupIcon />}\n                                            label=\"Group\"\n                                            disabled={isEmpty}\n                                            onClick={() => setShowGroup(true)}\n                                        />\n                                        <Button\n                                            primary\n                                            icon={<ShortcutIcon />}\n                                            label=\"Shortcuts\"\n                                            onClick={() => setShowHelp(true)}\n                                        />\n                                        <TextInput\n                                            name=\"seed\"\n                                            placeholder=\"seed\"\n                                            icon={<SeedIcon />}\n                                            value={seed.current}\n                                            onChange={event =>\n                                                seed.update(event.target.value)\n                                            }\n                                        />\n                                    </Box>\n                                }\n                            />\n\n                            <Button\n                                primary\n                                icon={<ShuffleIcon />}\n                                label=\"Shuffle\"\n                                disabled={isEmpty}\n                                onClick={shuffle}\n                            />\n                        </Box>\n                    </Box>\n                </Main>\n            </Keyboard>\n        </Grommet>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}