{"version":3,"sources":["theme.js","useShuffler.js","useQuery.js","App.js","base64.js","Preview.js","serviceWorker.js","index.js"],"names":["theme","buttons","outline","variant","color","bg","border","colors","primary","secondary","shuffler","list","array","i","length","j","Math","floor","random","useShuffler","initialList","useState","setList","target","useQuery","location","useLocation","URLSearchParams","search","App","params","history","useHistory","value","setValue","showPreview","setShowPreview","getAll","shuffleFn","width","flexWrap","flexDirection","p","py","onSubmit","event","preventDefault","append","push","toString","id","name","type","onChange","placeholder","autoComplete","map","item","fontSize","key","shortid","generate","my","mr","onClick","mt","readOnly","window","origin","btoa","JSON","stringify","Preview","state","useParams","error","setError","useEffect","src","parse","atob","base64","err","e","forEach","fontWeight","Boolean","hostname","match","ReactDOM","render","StrictMode","exact","path","from","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9774d30d.chunk.js","sourcesContent":["import { deep as theme } from '@theme-ui/presets'\n\nexport default {\n  ...theme,\n  buttons: {\n    outline: {\n      variant: 'buttons.primary',\n      color: 'primary',\n      bg: 'transparent',\n      border: `1px solid ${theme.colors.primary}`,\n    },\n    secondary: {\n      variant: 'buttons.primary',\n      color: 'background',\n      bg: 'secondary',\n    },\n  },\n}\n","import { useState } from 'react'\n\n// Durstenfeld's Shuffle Algorithm\n// The modern version of the Fisherâ€“Yates shuffle\nexport const shuffler = (list = []) => {\n  const array = [...list]\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[array[i], array[j]] = [array[j], array[i]]\n  }\n\n  return array\n}\n\nconst useShuffler = (initialList = []) => {\n  const [list, setList] = useState(shuffler(initialList))\n\n  return [\n    list,\n    target => setList(shuffler(target)),\n    () => setList(shuffler(list)),\n  ]\n}\n\nexport default useShuffler\n","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  const location = useLocation()\n\n  return new URLSearchParams(location.search)\n}\n\nexport default useQuery\n","import React, { useState } from 'react'\nimport { Box, Heading, Button, Flex } from 'rebass'\nimport { Input } from '@rebass/forms'\nimport shortid from 'shortid'\nimport { useHistory } from 'react-router-dom'\n\nimport useShuffler from './useShuffler'\nimport useQuery from './useQuery'\n\nimport * as base64 from './base64'\n\nconst EMPTY = ''\n\nfunction App() {\n  const params = useQuery()\n  const history = useHistory()\n  const [value, setValue] = useState(EMPTY)\n  const [showPreview, setShowPreview] = useState(false)\n\n  const [list, setList, shuffleFn] = useShuffler(params.getAll('item') ?? [])\n\n  const onChange = event => {\n    setValue(event.target.value)\n  }\n\n  const onSubmit = event => {\n    event.preventDefault()\n\n    setList([...list, value])\n    setValue(EMPTY)\n\n    params.append('item', value)\n    history.push(`/?${params.toString()}`)\n\n    return false\n  }\n\n  const onClick = event => {\n    event.preventDefault()\n\n    setShowPreview(true)\n  }\n\n  const onShuffle = event => {\n    event.preventDefault()\n\n    shuffleFn()\n  }\n\n  return (\n    <Flex\n      width={[1, 1, 1 / 2]}\n      flexWrap=\"wrap\"\n      flexDirection=\"column\"\n      p={[4, 4, 5]}\n    >\n      <Box py={[2, 2, 4]}>\n        <form onSubmit={onSubmit}>\n          <Input\n            id=\"text\"\n            name=\"text\"\n            type=\"text\"\n            value={value}\n            onChange={onChange}\n            placeholder=\"Anything goes here\"\n            autoComplete=\"off\"\n          />\n        </form>\n      </Box>\n      {list.length > 0 && (\n        <>\n          <Box>\n            {list.map(item => (\n              <Heading\n                fontSize={[5, 6, 7]}\n                color=\"primary\"\n                key={shortid.generate()}\n              >\n                {item}\n              </Heading>\n            ))}\n          </Box>\n          <Box>\n            <Flex my={[3, 3, 4]} flexDirection={['column', 'column', 'row']}>\n              <Box width={[1, 1, 1 / 2]} mr={[0, 0, 2]} my={[2, 2, 0]}>\n                <Button variant=\"primary\" onClick={onShuffle} width={1}>\n                  Shuffle\n                </Button>\n              </Box>\n              <Box width={[1, 1, 1 / 2]} mt={[2, 2, 0]}>\n                <Button variant=\"outline\" onClick={onClick} width={1}>\n                  Share\n                </Button>\n              </Box>\n            </Flex>\n\n            {showPreview && (\n              <Input\n                id=\"preview\"\n                name=\"preview\"\n                type=\"text\"\n                readOnly\n                value={`${window.location.origin}/preview/${base64.to(list)}`}\n              />\n            )}\n          </Box>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default App\n","export const to = target => btoa(JSON.stringify(target))\n\nexport const from = src => JSON.parse(atob(src))\n","import React, { useState, useEffect } from 'react'\n\nimport { Box, Text, Heading, Button, Flex } from 'rebass'\nimport shortid from 'shortid'\nimport { useParams, useHistory } from 'react-router-dom'\n\nimport * as base64 from './base64'\n\nfunction Preview() {\n  const { state } = useParams()\n  const history = useHistory()\n\n  const [list, setList] = useState([])\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    try {\n      setList(base64.from(state))\n    } catch (err) {\n      setError(err)\n    }\n  }, [state])\n\n  const onClick = e => {\n    e.preventDefault()\n\n    const params = new URLSearchParams()\n    list.forEach(item => params.append('item', item))\n\n    history.push(`/?${params.toString()}`)\n  }\n\n  return (\n    <Flex\n      width={[1, 1, 1 / 2]}\n      flexWrap=\"wrap\"\n      flexDirection=\"column\"\n      p={[4, 4, 5]}\n    >\n      <Box>\n        {error === null && (\n          <>\n            <Box>\n              {list.length > 0 &&\n                list.map(item => (\n                  <Heading\n                    fontSize={[5, 6, 7]}\n                    color=\"primary\"\n                    key={shortid.generate()}\n                  >\n                    {item}\n                  </Heading>\n                ))}\n            </Box>\n            <Box width={[1, 1, 1 / 2]} my={3}>\n              <Button variant=\"primary\" mr={2} onClick={onClick} width={1}>\n                Shuffle\n              </Button>\n            </Box>\n          </>\n        )}\n        {error !== null && (\n          <>\n            <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n              Invalid URL\n            </Text>\n            <Button variant=\"primary\" mt={2}>\n              Try Again\n            </Button>\n          </>\n        )}\n      </Box>\n    </Flex>\n  )\n}\n\nexport default Preview\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'theme-ui'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport './index.css'\nimport theme from './theme'\nimport App from './App'\nimport Preview from './Preview'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <App />\n          </Route>\n          <Route exact path=\"/preview/:state\">\n            <Preview />\n          </Route>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}